---
services:
  kafka:
    image: bitnami/kafka:3.5.0
    container_name: kafka
    restart: unless-stopped
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@localhost:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9091,EXTERNAL://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9091,EXTERNAL://${KAFKA_HOST}:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_METADATA_LOG_DIR=/bitnami/kafka/data
      - KAFKA_CREATE_TOPICS=Kafka:1:1
    ports:
      - ${KAFKA_HOST}:${KAFKA_PORT}:${KAFKA_PORT}
    volumes:
      - 'kafka_data:/bitnami/kafka'
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=test
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    ports:
      - ${POSTGRES_HOST}:${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - postgres:/data/postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  web-backend:
    build: .
    container_name: web
    restart: always
    environment:
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9091
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - UVICORN_HOST=0.0.0.0
      - UVICORN_PORT=${UVICORN_PORT}
    command: /bin/sh -cx "./start.sh"
    ports:
      - ${UVICORN_HOST}:${UVICORN_PORT}:${UVICORN_PORT}
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy

volumes:
  postgres:
  kafka_data:
